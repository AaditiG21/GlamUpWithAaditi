/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.cosmetic.view;

//import sort
import com.cosmetic.controller.alogrithms.BinarySearch;
import com.cosmetic.controller.alogrithms.InsertionSort;
import com.cosmetic.controller.alogrithms.MergeSort;
import com.cosmetic.controller.alogrithms.SelectionSort;

//importing model class
import com.cosmetic.model.MakeupModel;
import com.cosmetic.model.FragnanceModel;


//import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import com.cosmetic.util.ValidationUtil;

//import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 * LMUID: 23048679
 * @author Aaditi Ghimire
 */

public class GlamUpwithAaditi extends javax.swing.JFrame {

    private ArrayList<MakeupModel> makeupList;
    private ArrayList<FragnanceModel> fragnanceList;
    private java.awt.CardLayout cardLayout;

    public GlamUpwithAaditi() {
        initComponents();
        initializeLayout(); // Set up CardLayout and add screens
        initializeDataMakeup();
        initializeDataFragnance();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        homepnl2 = new javax.swing.JPanel();
        newlbl = new javax.swing.JLabel();
        perfimglbl = new javax.swing.JLabel();
        salelbl = new javax.swing.JLabel();
        offlbl = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Adminctrlpnl = new javax.swing.JPanel();
        Muppnl = new javax.swing.JPanel();
        muptitlelbl = new javax.swing.JLabel();
        mkuidtxt = new javax.swing.JTextField();
        mkushadetxt = new javax.swing.JTextField();
        mkupricetxt = new javax.swing.JTextField();
        addbtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        mkuquantitytxt = new javax.swing.JTextField();
        mkuingrtxt = new javax.swing.JTextField();
        mkumfgtxt = new javax.swing.JTextField();
        mkunametxt = new javax.swing.JTextField();
        mkuexptxt = new javax.swing.JTextField();
        mkubrandtxt = new javax.swing.JTextField();
        fragpnl = new javax.swing.JPanel();
        fragtitlelbl = new javax.swing.JLabel();
        fragidtxt = new javax.swing.JTextField();
        fragpricetxt = new javax.swing.JTextField();
        fragingritxt = new javax.swing.JTextField();
        add1btn = new javax.swing.JButton();
        update1btn = new javax.swing.JButton();
        delete1btn = new javax.swing.JButton();
        fragquantityxt = new javax.swing.JTextField();
        fragmfgtxt = new javax.swing.JTextField();
        fragexptxt = new javax.swing.JTextField();
        fragbrandtxt = new javax.swing.JTextField();
        fragnametxt = new javax.swing.JTextField();
        pnlCategory = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        makeuppnl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mkuptbl = new javax.swing.JTable();
        searchmkuimglbl = new javax.swing.JLabel();
        searchmkutxt = new javax.swing.JTextField();
        makeuppcombobox = new javax.swing.JComboBox<>();
        fragnancepnl = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fragnancetbl = new javax.swing.JTable();
        searchfragtxt = new javax.swing.JTextField();
        searchimgfrglbl = new javax.swing.JLabel();
        fragnancecombox = new javax.swing.JComboBox<>();
        pnlaboutus = new javax.swing.JPanel();
        abtuspnl = new javax.swing.JPanel();
        line1lbl = new javax.swing.JLabel();
        line2lbl = new javax.swing.JLabel();
        line3lbl = new javax.swing.JLabel();
        line4lbl = new javax.swing.JLabel();
        abtusheadlbl = new javax.swing.JLabel();
        girlimglbl = new javax.swing.JLabel();
        perfumelbl = new javax.swing.JLabel();
        pouchlbl = new javax.swing.JLabel();
        guwalbl = new javax.swing.JLabel();
        brushlbl = new javax.swing.JLabel();
        line5lbl = new javax.swing.JLabel();
        line6lbl = new javax.swing.JLabel();
        line7lbl = new javax.swing.JLabel();
        line8lbl = new javax.swing.JLabel();
        line9lbl = new javax.swing.JLabel();
        pnlcontact = new javax.swing.JPanel();
        calllbl = new javax.swing.JLabel();
        numlbl = new javax.swing.JLabel();
        num1lbl = new javax.swing.JLabel();
        openlbl = new javax.swing.JLabel();
        mailimglbl = new javax.swing.JLabel();
        messagelbl = new javax.swing.JLabel();
        emaillbl = new javax.swing.JLabel();
        connectlbl = new javax.swing.JLabel();
        phonelbl = new javax.swing.JLabel();
        fbimglbl = new javax.swing.JLabel();
        instaimglbl = new javax.swing.JLabel();
        whatsappimglbl = new javax.swing.JLabel();
        feedbacktxt = new javax.swing.JTextField();
        locationlbl = new javax.swing.JLabel();
        addresslbl = new javax.swing.JLabel();
        placelbl = new javax.swing.JLabel();
        btnlogout = new javax.swing.JButton();
        copyrightlbl = new javax.swing.JLabel();
        Loginpnl = new javax.swing.JPanel();
        welcomepnl = new javax.swing.JPanel();
        welcometbl = new javax.swing.JLabel();
        enterbtn = new javax.swing.JButton();
        emailtxt = new javax.swing.JTextField();
        lblloginerror = new javax.swing.JLabel();
        passwordfld = new javax.swing.JPasswordField();
        loginlbl = new javax.swing.JLabel();

        pnlMain.setBackground(new java.awt.Color(130, 113, 67));
        pnlMain.setPreferredSize(new java.awt.Dimension(752, 512));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Snap ITC", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Glam Up With Aaditi");
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jTabbedPane1.setBackground(new java.awt.Color(59, 41, 18));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(748, 512));

        pnlHome.setFont(new java.awt.Font("Segoe UI Historic", 0, 12)); // NOI18N
        pnlHome.setPreferredSize(new java.awt.Dimension(600, 300));

        homepnl2.setBackground(new java.awt.Color(225, 216, 184));
        homepnl2.setPreferredSize(new java.awt.Dimension(600, 300));

        newlbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        newlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newlbl.setText("N   E   W       A   R   R   I   V   A   L");
        newlbl.setToolTipText("");
        newlbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        newlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newlbl.setVerifyInputWhenFocusTarget(false);

        perfimglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/modelperfume.png"))); // NOI18N

        salelbl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        salelbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        salelbl.setText("WINTER SALE");
        salelbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        offlbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        offlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        offlbl.setText("UPTO 50% OFF");
        offlbl.setFocusable(false);
        offlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/model.png"))); // NOI18N

        javax.swing.GroupLayout homepnl2Layout = new javax.swing.GroupLayout(homepnl2);
        homepnl2.setLayout(homepnl2Layout);
        homepnl2Layout.setHorizontalGroup(
            homepnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homepnl2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homepnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(homepnl2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(homepnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(homepnl2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(offlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(salelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(perfimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        homepnl2Layout.setVerticalGroup(
            homepnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homepnl2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newlbl)
                .addGroup(homepnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homepnl2Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(salelbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(offlbl)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homepnl2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homepnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homepnl2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel6))
                            .addComponent(perfimglbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homepnl2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homepnl2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Home", pnlHome);

        Adminctrlpnl.setBackground(new java.awt.Color(59, 41, 18));

        Muppnl.setBackground(new java.awt.Color(239, 227, 187));
        Muppnl.setPreferredSize(new java.awt.Dimension(619, 208));

        muptitlelbl.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        muptitlelbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        muptitlelbl.setText("Makeup");

        mkuidtxt.setBackground(new java.awt.Color(202, 197, 182));
        mkuidtxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mkuidtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Product ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        mkushadetxt.setBackground(new java.awt.Color(202, 197, 182));
        mkushadetxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Shade", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        mkupricetxt.setBackground(new java.awt.Color(202, 197, 182));
        mkupricetxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        addbtn.setBackground(new java.awt.Color(59, 41, 18));
        addbtn.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        addbtn.setForeground(new java.awt.Color(255, 255, 255));
        addbtn.setText("ADD");
        addbtn.setPreferredSize(new java.awt.Dimension(72, 23));
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        updatebtn.setBackground(new java.awt.Color(59, 41, 18));
        updatebtn.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        updatebtn.setForeground(new java.awt.Color(255, 255, 255));
        updatebtn.setText("UPDATE");
        updatebtn.setPreferredSize(new java.awt.Dimension(72, 23));
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        deletebtn.setBackground(new java.awt.Color(59, 41, 18));
        deletebtn.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        deletebtn.setForeground(new java.awt.Color(255, 255, 255));
        deletebtn.setText("DELETE");
        deletebtn.setPreferredSize(new java.awt.Dimension(72, 23));
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        mkuquantitytxt.setBackground(new java.awt.Color(202, 197, 182));
        mkuquantitytxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Quantity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        mkuingrtxt.setBackground(new java.awt.Color(202, 197, 182));
        mkuingrtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ingredients", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        mkumfgtxt.setBackground(new java.awt.Color(202, 197, 182));
        mkumfgtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mfg date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        mkunametxt.setBackground(new java.awt.Color(202, 197, 182));
        mkunametxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mkunametxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Product Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        mkuexptxt.setBackground(new java.awt.Color(202, 197, 182));
        mkuexptxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Exp date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        mkubrandtxt.setBackground(new java.awt.Color(202, 197, 182));
        mkubrandtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Brand", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        javax.swing.GroupLayout MuppnlLayout = new javax.swing.GroupLayout(Muppnl);
        Muppnl.setLayout(MuppnlLayout);
        MuppnlLayout.setHorizontalGroup(
            MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(muptitlelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MuppnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MuppnlLayout.createSequentialGroup()
                        .addComponent(mkuidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mkunametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mkushadetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MuppnlLayout.createSequentialGroup()
                        .addComponent(mkupricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mkuingrtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(mkumfgtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MuppnlLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(mkuexptxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addGroup(MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deletebtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatebtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addbtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(MuppnlLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(mkuquantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mkubrandtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        MuppnlLayout.setVerticalGroup(
            MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MuppnlLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(muptitlelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mkuidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mkunametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mkushadetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mkuquantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mkubrandtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MuppnlLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MuppnlLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(MuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mkupricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mkuingrtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mkumfgtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mkuexptxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(39, 39, 39))
        );

        fragpnl.setBackground(new java.awt.Color(239, 227, 187));
        fragpnl.setPreferredSize(new java.awt.Dimension(620, 207));

        fragtitlelbl.setBackground(new java.awt.Color(255, 255, 255));
        fragtitlelbl.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 18)); // NOI18N
        fragtitlelbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fragtitlelbl.setText("Fragnance");

        fragidtxt.setBackground(new java.awt.Color(202, 197, 182));
        fragidtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Product ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        fragpricetxt.setBackground(new java.awt.Color(202, 197, 182));
        fragpricetxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        fragingritxt.setBackground(new java.awt.Color(202, 197, 182));
        fragingritxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ingredient", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        add1btn.setBackground(new java.awt.Color(59, 41, 18));
        add1btn.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        add1btn.setForeground(new java.awt.Color(255, 255, 255));
        add1btn.setText("ADD");
        add1btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add1btnActionPerformed(evt);
            }
        });

        update1btn.setBackground(new java.awt.Color(59, 41, 18));
        update1btn.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        update1btn.setForeground(new java.awt.Color(255, 255, 255));
        update1btn.setText("UPDATE");
        update1btn.setPreferredSize(new java.awt.Dimension(72, 23));
        update1btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update1btnActionPerformed(evt);
            }
        });

        delete1btn.setBackground(new java.awt.Color(59, 41, 18));
        delete1btn.setFont(new java.awt.Font("Segoe UI Black", 1, 10)); // NOI18N
        delete1btn.setForeground(new java.awt.Color(255, 255, 255));
        delete1btn.setText("DELETE");
        delete1btn.setPreferredSize(new java.awt.Dimension(72, 23));
        delete1btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete1btnActionPerformed(evt);
            }
        });

        fragquantityxt.setBackground(new java.awt.Color(202, 197, 182));
        fragquantityxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Quantity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        fragmfgtxt.setBackground(new java.awt.Color(202, 197, 182));
        fragmfgtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mfg date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        fragexptxt.setBackground(new java.awt.Color(202, 197, 182));
        fragexptxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Exp date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        fragbrandtxt.setBackground(new java.awt.Color(202, 197, 182));
        fragbrandtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Brand", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        fragnametxt.setBackground(new java.awt.Color(202, 197, 182));
        fragnametxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fragnametxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Product Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI Light", 1, 14), new java.awt.Color(59, 41, 18))); // NOI18N

        javax.swing.GroupLayout fragpnlLayout = new javax.swing.GroupLayout(fragpnl);
        fragpnl.setLayout(fragpnlLayout);
        fragpnlLayout.setHorizontalGroup(
            fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fragpnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fragtitlelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(fragpnlLayout.createSequentialGroup()
                        .addGroup(fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, fragpnlLayout.createSequentialGroup()
                                .addComponent(fragidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fragnametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(fragingritxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, fragpnlLayout.createSequentialGroup()
                                .addComponent(fragpricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(fragmfgtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fragexptxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fragpnlLayout.createSequentialGroup()
                                .addGap(163, 163, 163)
                                .addGroup(fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(delete1btn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(update1btn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(add1btn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(fragpnlLayout.createSequentialGroup()
                                .addComponent(fragquantityxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fragbrandtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14))))
        );
        fragpnlLayout.setVerticalGroup(
            fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fragpnlLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(fragtitlelbl)
                .addGroup(fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fragpnlLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add1btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update1btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete1btn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(fragpnlLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fragidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fragnametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fragingritxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fragquantityxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fragbrandtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(fragpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fragpricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fragmfgtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fragexptxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))))
        );

        javax.swing.GroupLayout AdminctrlpnlLayout = new javax.swing.GroupLayout(Adminctrlpnl);
        Adminctrlpnl.setLayout(AdminctrlpnlLayout);
        AdminctrlpnlLayout.setHorizontalGroup(
            AdminctrlpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminctrlpnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdminctrlpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Muppnl, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                    .addComponent(fragpnl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE))
                .addContainerGap())
        );
        AdminctrlpnlLayout.setVerticalGroup(
            AdminctrlpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminctrlpnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Muppnl, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fragpnl, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Admin Control", Adminctrlpnl);

        pnlCategory.setPreferredSize(new java.awt.Dimension(600, 300));

        jTabbedPane2.setBackground(new java.awt.Color(59, 41, 18));
        jTabbedPane2.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane2.setPreferredSize(new java.awt.Dimension(250, 100));

        makeuppnl.setBackground(new java.awt.Color(230, 221, 190));

        mkuptbl.setAutoCreateRowSorter(true);
        mkuptbl.setBackground(new java.awt.Color(225, 220, 203));
        mkuptbl.setFont(new java.awt.Font("Yu Gothic Medium", 1, 10)); // NOI18N
        mkuptbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", " Name", "Shade", "Quantity", "Brand ", "Price", "Ingredients", "Mfg date", "Exp date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mkuptbl.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(mkuptbl);
        if (mkuptbl.getColumnModel().getColumnCount() > 0) {
            mkuptbl.getColumnModel().getColumn(0).setResizable(false);
            mkuptbl.getColumnModel().getColumn(1).setResizable(false);
            mkuptbl.getColumnModel().getColumn(2).setResizable(false);
            mkuptbl.getColumnModel().getColumn(3).setResizable(false);
            mkuptbl.getColumnModel().getColumn(4).setResizable(false);
            mkuptbl.getColumnModel().getColumn(5).setResizable(false);
            mkuptbl.getColumnModel().getColumn(6).setResizable(false);
            mkuptbl.getColumnModel().getColumn(7).setResizable(false);
            mkuptbl.getColumnModel().getColumn(8).setResizable(false);
        }

        searchmkuimglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/search2.png"))); // NOI18N
        searchmkuimglbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchmkuimglblMouseClicked(evt);
            }
        });

        searchmkutxt.setBackground(new java.awt.Color(230, 221, 190));

        makeuppcombobox.setBackground(new java.awt.Color(230, 221, 190));
        makeuppcombobox.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        makeuppcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "Price Ascending(lowest-highest)", "Price Descending(highest-lowest)", "Name Ascending(A-Z)", "Name Descending(Z-A)", "ID Ascending", "ID Descending", " ", " ", " " }));
        makeuppcombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeuppcomboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout makeuppnlLayout = new javax.swing.GroupLayout(makeuppnl);
        makeuppnl.setLayout(makeuppnlLayout);
        makeuppnlLayout.setHorizontalGroup(
            makeuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, makeuppnlLayout.createSequentialGroup()
                .addContainerGap(222, Short.MAX_VALUE)
                .addComponent(makeuppcombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchmkutxt, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchmkuimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addComponent(jScrollPane1)
        );
        makeuppnlLayout.setVerticalGroup(
            makeuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, makeuppnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(makeuppnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchmkuimglbl)
                    .addComponent(searchmkutxt, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(makeuppcombobox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane2.addTab("Makeup", makeuppnl);

        fragnancepnl.setBackground(new java.awt.Color(230, 221, 190));

        fragnancetbl.setBackground(new java.awt.Color(202, 197, 182));
        fragnancetbl.setFont(new java.awt.Font("Yu Gothic Medium", 1, 10)); // NOI18N
        fragnancetbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Ingredient", "Quantity", "Brand", "Price", "Mfg date", "Exp date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(fragnancetbl);
        if (fragnancetbl.getColumnModel().getColumnCount() > 0) {
            fragnancetbl.getColumnModel().getColumn(0).setResizable(false);
            fragnancetbl.getColumnModel().getColumn(1).setResizable(false);
            fragnancetbl.getColumnModel().getColumn(2).setResizable(false);
            fragnancetbl.getColumnModel().getColumn(3).setResizable(false);
            fragnancetbl.getColumnModel().getColumn(4).setResizable(false);
            fragnancetbl.getColumnModel().getColumn(5).setResizable(false);
            fragnancetbl.getColumnModel().getColumn(6).setResizable(false);
            fragnancetbl.getColumnModel().getColumn(7).setResizable(false);
        }

        searchfragtxt.setBackground(new java.awt.Color(225, 216, 184));

        searchimgfrglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/search2.png"))); // NOI18N
        searchimgfrglbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchimgfrglblMouseClicked(evt);
            }
        });

        fragnancecombox.setBackground(new java.awt.Color(230, 221, 190));
        fragnancecombox.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        fragnancecombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "Price Ascending(lowest-highest)", "Price Descending(highest-lowest)", "Name Ascending(A-Z)", "Name Descending(Z-A)", "ID Ascending", "ID Descending", " " }));
        fragnancecombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fragnancecomboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fragnancepnlLayout = new javax.swing.GroupLayout(fragnancepnl);
        fragnancepnl.setLayout(fragnancepnlLayout);
        fragnancepnlLayout.setHorizontalGroup(
            fragnancepnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fragnancepnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fragnancecombox, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchfragtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchimgfrglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        );
        fragnancepnlLayout.setVerticalGroup(
            fragnancepnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fragnancepnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fragnancepnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fragnancecombox)
                    .addGroup(fragnancepnlLayout.createSequentialGroup()
                        .addComponent(searchimgfrglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addComponent(searchfragtxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
        );

        fragnancecombox.getAccessibleContext().setAccessibleName("");

        jTabbedPane2.addTab("Fragnance", fragnancepnl);

        javax.swing.GroupLayout pnlCategoryLayout = new javax.swing.GroupLayout(pnlCategory);
        pnlCategory.setLayout(pnlCategoryLayout);
        pnlCategoryLayout.setHorizontalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        );
        pnlCategoryLayout.setVerticalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCategoryLayout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Category", pnlCategory);

        pnlaboutus.setBackground(new java.awt.Color(10, 40, 26));
        pnlaboutus.setPreferredSize(new java.awt.Dimension(634, 439));

        line1lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line1lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        line1lbl.setText("Guwa cosmetics focuses on providing customers with best and high quality ");

        line2lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line2lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        line2lbl.setText("products. Our Our page offers you high range of makeup products and ");

        line3lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line3lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        line3lbl.setText(" fragnance options. Our  aim is to make beauty accessible and easy to find.");

        line4lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line4lbl.setText(" GUWA makes sure you  have the best product at your belldoor. ");

        abtusheadlbl.setBackground(new java.awt.Color(0, 0, 0));
        abtusheadlbl.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        abtusheadlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        abtusheadlbl.setText("ABOUT US ");
        abtusheadlbl.setFocusable(false);
        abtusheadlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        girlimglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/girl.png"))); // NOI18N

        perfumelbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/perfume.png"))); // NOI18N

        pouchlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/pouch.png"))); // NOI18N

        javax.swing.GroupLayout abtuspnlLayout = new javax.swing.GroupLayout(abtuspnl);
        abtuspnl.setLayout(abtuspnlLayout);
        abtuspnlLayout.setHorizontalGroup(
            abtuspnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abtuspnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abtuspnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abtuspnlLayout.createSequentialGroup()
                        .addGroup(abtuspnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(line2lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(line4lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(line1lbl, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addGroup(abtuspnlLayout.createSequentialGroup()
                        .addComponent(perfumelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(abtuspnlLayout.createSequentialGroup()
                .addGroup(abtuspnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(line3lbl)
                    .addGroup(abtuspnlLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(girlimglbl))
                    .addComponent(abtusheadlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abtuspnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pouchlbl)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        abtuspnlLayout.setVerticalGroup(
            abtuspnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abtuspnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(abtusheadlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abtuspnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(perfumelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pouchlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(line1lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(line2lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(line3lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(line4lbl)
                .addGap(18, 18, 18)
                .addComponent(girlimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        guwalbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/guwaa.png"))); // NOI18N

        brushlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/brush.png"))); // NOI18N

        line5lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line5lbl.setForeground(new java.awt.Color(255, 255, 255));
        line5lbl.setText(" Guwa believes that makeup is more than just a beauty.  Its about ");
        line5lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        line6lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line6lbl.setForeground(new java.awt.Color(255, 255, 255));
        line6lbl.setText("feeling confident and comfortable in your own skin.   Our GUWA");
        line6lbl.setToolTipText("");
        line6lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        line6lbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        line7lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line7lbl.setForeground(new java.awt.Color(255, 255, 255));
        line7lbl.setText("team produce makeup with one goal set in mind - to bring only ");
        line7lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        line7lbl.setFocusable(false);
        line7lbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        line8lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line8lbl.setForeground(new java.awt.Color(255, 255, 255));
        line8lbl.setText("good.  Being environmentally consious we work with brands that  ");
        line8lbl.setToolTipText("");
        line8lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        line8lbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        line9lbl.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        line9lbl.setForeground(new java.awt.Color(255, 255, 255));
        line9lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        line9lbl.setText(" prioritizes  sustainable packaging. ");
        line9lbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout pnlaboutusLayout = new javax.swing.GroupLayout(pnlaboutus);
        pnlaboutus.setLayout(pnlaboutusLayout);
        pnlaboutusLayout.setHorizontalGroup(
            pnlaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlaboutusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abtuspnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(line7lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(line6lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(line5lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(line8lbl)
                    .addComponent(line9lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(brushlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(guwalbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlaboutusLayout.setVerticalGroup(
            pnlaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlaboutusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(abtuspnl, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlaboutusLayout.createSequentialGroup()
                        .addComponent(guwalbl, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(brushlbl)
                        .addGap(18, 18, 18)
                        .addComponent(line5lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(line6lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(line7lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(line8lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(line9lbl)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("About Us", pnlaboutus);

        pnlcontact.setBackground(new java.awt.Color(230, 221, 190));

        calllbl.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        calllbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        calllbl.setText("Give us a call ?");

        numlbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numlbl.setText("+977-9841689672");

        num1lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        num1lbl.setText("+01-5974672");

        openlbl.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        openlbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        openlbl.setText("Open from SUN - FRI, 11AM-6PM ");
        openlbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        openlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        mailimglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/mail_.png"))); // NOI18N

        messagelbl.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        messagelbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        messagelbl.setText("Send us your Message ");

        emaillbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        emaillbl.setText("guwa123@gmail.com");

        connectlbl.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        connectlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectlbl.setText("Connect with us :");

        phonelbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/phone.png"))); // NOI18N
        phonelbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        phonelbl.setRequestFocusEnabled(false);

        fbimglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/facebook.png"))); // NOI18N

        instaimglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/insta_.png"))); // NOI18N

        whatsappimglbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/1whatsapp.png"))); // NOI18N

        feedbacktxt.setBackground(new java.awt.Color(202, 197, 182));
        feedbacktxt.setForeground(new java.awt.Color(255, 255, 255));
        feedbacktxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        feedbacktxt.setToolTipText("");
        feedbacktxt.setAutoscrolls(false);
        feedbacktxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Share your thoughts", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT Condensed", 1, 18), new java.awt.Color(59, 41, 18))); // NOI18N
        feedbacktxt.setCaretColor(new java.awt.Color(230, 221, 190));

        locationlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/location.png"))); // NOI18N

        addresslbl.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 18)); // NOI18N
        addresslbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addresslbl.setText("Location");

        placelbl.setText("Durbar Marg, Kathmandu");

        javax.swing.GroupLayout pnlcontactLayout = new javax.swing.GroupLayout(pnlcontact);
        pnlcontact.setLayout(pnlcontactLayout);
        pnlcontactLayout.setHorizontalGroup(
            pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlcontactLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlcontactLayout.createSequentialGroup()
                        .addComponent(openlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlcontactLayout.createSequentialGroup()
                        .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlcontactLayout.createSequentialGroup()
                                .addComponent(calllbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(304, 304, 304))
                            .addGroup(pnlcontactLayout.createSequentialGroup()
                                .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlcontactLayout.createSequentialGroup()
                                        .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(phonelbl)
                                            .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(numlbl, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                                .addComponent(num1lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
                                        .addGap(93, 93, 93)
                                        .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(locationlbl)
                                            .addComponent(addresslbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(placelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(feedbacktxt, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlcontactLayout.createSequentialGroup()
                                    .addGap(48, 48, 48)
                                    .addComponent(fbimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(instaimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(whatsappimglbl)
                                    .addGap(21, 21, 21))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlcontactLayout.createSequentialGroup()
                                    .addComponent(mailimglbl)
                                    .addGap(77, 77, 77))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emaillbl, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlcontactLayout.createSequentialGroup()
                                        .addComponent(messagelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39))))
                            .addGroup(pnlcontactLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                                .addComponent(connectlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        pnlcontactLayout.setVerticalGroup(
            pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlcontactLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(phonelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlcontactLayout.createSequentialGroup()
                        .addComponent(locationlbl)
                        .addGap(19, 19, 19))
                    .addComponent(mailimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calllbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addresslbl)
                    .addComponent(messagelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numlbl)
                    .addComponent(placelbl)
                    .addComponent(emaillbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(num1lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(openlbl)
                .addGap(35, 35, 35)
                .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlcontactLayout.createSequentialGroup()
                        .addComponent(connectlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlcontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fbimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(instaimglbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(whatsappimglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(feedbacktxt, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Contact Us", pnlcontact);

        btnlogout.setBackground(new java.awt.Color(239, 238, 210));
        btnlogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnlogout.setText("Log Out");
        btnlogout.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        btnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlogoutActionPerformed(evt);
            }
        });

        copyrightlbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        copyrightlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        copyrightlbl.setText("CopyRight © 2024 GUWA");
        copyrightlbl.setFocusable(false);
        copyrightlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(copyrightlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(copyrightlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnlogout)))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(900, 500));
        setMaximizedBounds(new java.awt.Rectangle(90, 0, 0, 0));

        Loginpnl.setBackground(new java.awt.Color(10, 40, 26));
        Loginpnl.setPreferredSize(new java.awt.Dimension(752, 512));

        welcomepnl.setBackground(new java.awt.Color(110, 81, 33));
        welcomepnl.setPreferredSize(new java.awt.Dimension(385, 381));

        welcometbl.setBackground(new java.awt.Color(230, 221, 190));
        welcometbl.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        welcometbl.setForeground(new java.awt.Color(230, 221, 190));
        welcometbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcometbl.setText("Welcome, Start Your GUWA Journey ");
        welcometbl.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        welcometbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        enterbtn.setBackground(new java.awt.Color(230, 221, 190));
        enterbtn.setText("Enter");
        enterbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        enterbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterbtnActionPerformed(evt);
            }
        });

        emailtxt.setBackground(new java.awt.Color(230, 221, 190));
        emailtxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        emailtxt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Email"));
        emailtxt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        emailtxt.setPreferredSize(new java.awt.Dimension(64, 48));

        passwordfld.setBackground(new java.awt.Color(230, 221, 190));
        passwordfld.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        passwordfld.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Password"));
        passwordfld.setPreferredSize(new java.awt.Dimension(64, 48));

        javax.swing.GroupLayout welcomepnlLayout = new javax.swing.GroupLayout(welcomepnl);
        welcomepnl.setLayout(welcomepnlLayout);
        welcomepnlLayout.setHorizontalGroup(
            welcomepnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomepnlLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(welcomepnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblloginerror, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(welcometbl, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(welcomepnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(passwordfld, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(emailtxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        welcomepnlLayout.setVerticalGroup(
            welcomepnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomepnlLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(welcometbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(emailtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(passwordfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(enterbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(lblloginerror, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        loginlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cosmetic/resources/glam2.png"))); // NOI18N

        javax.swing.GroupLayout LoginpnlLayout = new javax.swing.GroupLayout(Loginpnl);
        Loginpnl.setLayout(LoginpnlLayout);
        LoginpnlLayout.setHorizontalGroup(
            LoginpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginpnlLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(loginlbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomepnl, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        LoginpnlLayout.setVerticalGroup(
            LoginpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginpnlLayout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addGroup(LoginpnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(welcomepnl, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 752, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(Loginpnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(Loginpnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);
        
        // Add panels with unique identifiers
        getContentPane().add(Loginpnl, "Login");
        getContentPane().add(pnlMain, "MainScreen");
        cardLayout.show(getContentPane(), "Login");
    }

    private void Loginpnl(String panelName) {
        cardLayout.show(getContentPane(), panelName);
    }

    private void initializeDataMakeup() {
        makeupList = new ArrayList();
        registerMakeup(new MakeupModel(1500, "Lipstick", "Mocha", 10, "Mac", 6000, "", "2023 August", "2026 June"));
        registerMakeup(new MakeupModel(1256, "Concealer", "beige", 8, "Milani", 12000, "", "2023 april", "2025 April"));
        registerMakeup(new MakeupModel(1260, "Blush", "red wine", 3, "wet n wild", 1800, "", "2023 july", "2029 May"));
        registerMakeup(new MakeupModel(1211, "Gloss", "red ", 3, "LA girl", 1400, "", "2023 April", "2028 May"));
        registerMakeup(new MakeupModel(1001, "Mascara", "black", 6, "Maybelline", 1600, "", "2020 July", "2024 June"));

    }

    private void initializeDataFragnance() {
        fragnanceList = new ArrayList();
        registerFragnance(new FragnanceModel(1234, "Rain", "vanilla", 2, "Chanel", 6000, "2023 May", "2024 June"));
        registerFragnance(new FragnanceModel(1200, "Love", "strawberry ", 4, "SO...?", 1000, "2024 April", "2024 April"));
        registerFragnance(new FragnanceModel(1256, "Citrus dream", "alcohol", 6, "Dior", 1039, "2022 June", "2024 May"));
        registerFragnance(new FragnanceModel(1399, "Soft rose", "alcohol", 8, "Gucci", 1078, "2021 July", "2024 August"));
        registerFragnance(new FragnanceModel(1286, "Eternal Dew", "alcohol", 5, "Versace", 1099, "2023 August", "2024 April"));

    }

    private void registerMakeup(MakeupModel makeup) {
        makeupList.add(makeup);
        DefaultTableModel model = (DefaultTableModel) mkuptbl.getModel();
        model.addRow(new Object[]{
            makeup.getMid(), makeup.getMname(), makeup.getMshade(), makeup.getMquantity(), makeup.getMbrand(), makeup.getMprice(),
            makeup.getMingredients(), makeup.getMmfgdate(), makeup.getMexpdate()
        });
    }

    private void registerFragnance(FragnanceModel fragnance) {

        fragnanceList.add(fragnance);
        DefaultTableModel model = (DefaultTableModel) fragnancetbl.getModel();
        model.addRow(new Object[]{
            fragnance.getFid(), fragnance.getFname(), fragnance.getFingredient(), fragnance.getFquantity(), fragnance.getFbrand(),
            fragnance.getFprice(), fragnance.getFmfgdate(), fragnance.getFexpdate()
        });
    }

    private void clearFieldsM() {
        mkuidtxt.setText("");
        mkunametxt.setText("");
        mkushadetxt.setText("");
        mkuquantitytxt.setText("");
        mkubrandtxt.setText("");
        mkupricetxt.setText("");
        mkuingrtxt.setText("");
        mkumfgtxt.setText("");
        mkuexptxt.setText("");

    }

    private void clearFieldsF() {
        fragidtxt.setText("");
        fragnametxt.setText("");
        fragingritxt.setText("");
        fragquantityxt.setText("");
        fragbrandtxt.setText("");
        fragpricetxt.setText("");
        fragmfgtxt.setText("");
        fragexptxt.setText("");
    }


    private void enterbtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String email = emailtxt.getText();
        String password = new String(passwordfld.getPassword());

        if (email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(welcomepnl, "Please enter the values.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } // Check if username and password are incorrect
        else if (!email.equals("guwa") || !password.equals("guwa")) {
            JOptionPane.showMessageDialog(welcomepnl, "Username or Password not correct.", "ERROR", JOptionPane.ERROR_MESSAGE);

        } // If credentials are correct, proceed to load the main screen
        else {
            JOptionPane.showMessageDialog(welcomepnl, "Login Successfull.", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
            lblloginerror.setText(""); // Clear any previous error messages
            Loginpnl("MainScreen"); // Load the main screen

        }


    }                                        


    private void btnlogoutActionPerformed(java.awt.event.ActionEvent evt) {                                          
        passwordfld.setText("");
        emailtxt.setText("");
        Loginpnl("Login");
        // Load the main screen
    }                                         


    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:

        String Mid = mkuidtxt.getText();
        String Mname = mkunametxt.getText();
        String Mshade = mkushadetxt.getText();
        String Mquantity = mkuquantitytxt.getText();
        String Mbrand = mkubrandtxt.getText();
        String Mprice = mkupricetxt.getText();
        String Mingredients = mkuingrtxt.getText();
        String Mmfgdate = mkumfgtxt.getText();
        String Mexpdate = mkuexptxt.getText();

        if (Mid.isEmpty() || Mname.isEmpty() || Mshade.isEmpty() || Mquantity.isEmpty() || Mbrand.isEmpty()
                || Mprice.isEmpty() || Mingredients.isEmpty() || Mmfgdate.isEmpty() || Mexpdate.isEmpty()) {
            JOptionPane.showMessageDialog(Muppnl, "Please enter all details of makeup.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {

                int makeupid = Integer.parseInt(Mid);
                int makeupquantity = Integer.parseInt(Mquantity);
                int makeupprice = Integer.parseInt(Mprice);
                // Initialize the validation utility

                // Validate each field using the validator
                // Validate the product code
                if (!ValidationUtil.validateMId(makeupid)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product ID error: Must start with 1 and consists 3 more digits.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Validate the product name
                if (!ValidationUtil.validateMName(Mname)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Name error: Must contain only letters and spaces.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Validate the product shade
                if (!ValidationUtil.validateMShade(Mshade)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Shade error:Must contain only letters and spaces.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the quantity
                if (!ValidationUtil.validateMQuantity(makeupquantity)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Quantity error: Only contains one digit number.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the brand
                if (!ValidationUtil.validateMBrand(Mbrand)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Brand error: Must contain only letters and spaces.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the price
                if (!ValidationUtil.validateMPrice(makeupprice)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Price error: Must be of 4 digits.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the ingridients
                if (!ValidationUtil.validateMINGREDIENTS(Mingredients)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Ingredient error: Must contain only letters and spaces.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the manufactured date
                if (!ValidationUtil.validateMMFGDATE(Mmfgdate)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Manufactured date error: Must start with 2 followed by other 3 digits and contains"
                            + " any one month among 12 months.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the expiry date
                if (!ValidationUtil.validateMEXPDATE(Mexpdate)) {
                    JOptionPane.showMessageDialog(Muppnl, "Product Expired date error: Must start with 2 follwed by other3 digits and contains "
                            + "any one month among 12 months.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                boolean makeupExists = false;
                for (MakeupModel makeup : makeupList) {
                    if (makeup.getMid() == makeupid) {
                        makeupExists = true;
                        break;
                    }

                }
                if (makeupExists) {
                    JOptionPane.showMessageDialog(Muppnl, "The product already exists.", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    MakeupModel makeup = new MakeupModel(makeupid, Mname, Mshade, makeupquantity, Mbrand, makeupprice, Mingredients, Mmfgdate, Mexpdate);
                    registerMakeup(makeup);
                    JOptionPane.showMessageDialog(pnlMain, "Successfully added product!", "Success", JOptionPane.INFORMATION_MESSAGE);

                }

            } catch (NumberFormatException n) {
                JOptionPane.showMessageDialog(Muppnl, "Invalid input. Please enter valid numbers.", "Information", JOptionPane.INFORMATION_MESSAGE);

            }

        }
    }                                      

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // Getting the input data from the text fields
        String Mid = mkuidtxt.getText();
        String Mname = mkunametxt.getText();
        String Mshade = mkushadetxt.getText();
        String Mquantity = mkuquantitytxt.getText();
        String Mbrand = mkubrandtxt.getText();
        String Mprice = mkupricetxt.getText();
        String Mingredients = mkuingrtxt.getText();
        String Mmfgdate = mkumfgtxt.getText();
        String Mexpdate = mkuexptxt.getText();

        // Check if any fields are empty
        if (Mid.isEmpty() || Mname.isEmpty() || Mshade.isEmpty() || Mquantity.isEmpty() || Mbrand.isEmpty() || Mprice.isEmpty() || 
                Mingredients.isEmpty() || Mmfgdate.isEmpty() || Mexpdate.isEmpty()) {
            JOptionPane.showMessageDialog(Muppnl, "Please enter all details of makeup.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {

            // Parsing integer and double values for validation
            int makeupid = Integer.parseInt(Mid);
            int makeupquantity = Integer.parseInt(Mquantity);
            int makeupprice = Integer.parseInt(Mprice);

            if (!ValidationUtil.validateMId(makeupid)) {
                JOptionPane.showMessageDialog(Muppnl, "Product ID error: Must start with 1 and consists 3 more digits.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate the product name
            if (!ValidationUtil.validateMName(Mname)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Name error: Must contain only letters and spaces.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate the product shade
            if (!ValidationUtil.validateMShade(Mshade)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Shade error:Must contain only letters and spaces.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the quantity
            if (!ValidationUtil.validateMQuantity(makeupquantity)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Quantity error: Only contains one digit number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the brand
            if (!ValidationUtil.validateMBrand(Mbrand)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Brand error: Must contain only letters and spaces.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the price
            if (!ValidationUtil.validateMPrice(makeupprice)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Price error: Must be of 4 digits.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the ingredients
            if (!ValidationUtil.validateMINGREDIENTS(Mingredients)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Ingredient error: Must contain only letters and spaces.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the manufactured date
            if (!ValidationUtil.validateMMFGDATE(Mmfgdate)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Manufactured date error: Must start with 2 followed by other 3 digits and"
                        + " conatins any one month among 12 months.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the expiry date
            if (!ValidationUtil.validateMEXPDATE(Mexpdate)) {
                JOptionPane.showMessageDialog(Muppnl, "Product Expired date error: Must start with 2 follwed by other3 digits and "
                        + "conatins any one month among 12 months.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Flag to check if makeup with the given ID exists
            boolean makeupFound = false;

            // Searching for the makeup in the makeupList to update
            for (int i = 0; i < makeupList.size(); i++) {
                MakeupModel makeup = makeupList.get(i);

                // If the makeup ID matches, update the makeup details
                if (makeup.getMid() == makeupid) {
                    makeup.setMname(Mname);
                    makeup.setMshade(Mshade);
                    makeup.setMquantity(makeupquantity);
                    makeup.setMbrand(Mbrand);
                    makeup.setMprice(makeupprice);
                    makeup.setMingredients(Mingredients);
                    makeup.setMmfgdate(Mmfgdate);
                    makeup.setMexpdate(Mexpdate);

                    // Update the table (if needed)
                    DefaultTableModel model = (DefaultTableModel) mkuptbl.getModel();
                    model.setValueAt(Mname, i, 1); // Update name
                    model.setValueAt(Mshade, i, 2); // Update shade
                    model.setValueAt(makeupquantity, i, 3); // Update quantity
                    model.setValueAt(Mbrand, i, 4); // Update brand
                    model.setValueAt(makeupprice, i, 5); // Update price
                    model.setValueAt(Mingredients, i, 6); // Update ingredients
                    model.setValueAt(Mmfgdate, i, 7); // Update manufacture date
                    model.setValueAt(Mexpdate, i, 8); // Update expiration date

                    makeupFound = true;
                    JOptionPane.showMessageDialog(Muppnl, "Makeup details updated successfully!", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            }

            // If no matching makeup is found, show an error
            if (!makeupFound) {
                JOptionPane.showMessageDialog(Muppnl, "No makeup found with the given ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Clear text fields after updating
            clearFieldsM();

        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(Muppnl, "Invalid input. Please enter valid numbers for ID, quantity, and price.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(Muppnl, "An error occurred while updating the makeup details.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }                                         

    private void update1btnActionPerformed(java.awt.event.ActionEvent evt) {                                           

        // Getting the input data from the text fields
        String Fid = fragidtxt.getText();
        String Fname = fragnametxt.getText();
        String Fingredient = fragingritxt.getText();
        String Fquantity = fragquantityxt.getText();
        String Fbrand = fragbrandtxt.getText();
        String Fprice = fragpricetxt.getText();
        String Fmfgdate = fragmfgtxt.getText();
        String Fexpdate = fragexptxt.getText();

        // Check if any fields are empty
        if (Fid.isEmpty() || Fname.isEmpty() || Fingredient.isEmpty() || Fquantity.isEmpty() || Fbrand.isEmpty() 
                || Fprice.isEmpty() || Fmfgdate.isEmpty() || Fexpdate.isEmpty()) {
            JOptionPane.showMessageDialog(fragpnl, "Please enter all details of fragrance.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {

            int fragid = Integer.parseInt(Fid);
            int fragquantity = Integer.parseInt(Fquantity);
            int fragprice = Integer.parseInt(Fprice);

            // Validate the product id
            if (!ValidationUtil.validateFId(fragid)) {
                JOptionPane.showMessageDialog(fragpnl, "Product ID error: Must start with 1 and consists 3 more digits.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate the product name
            if (!ValidationUtil.validateFName(Fname)) {
                JOptionPane.showMessageDialog(fragpnl, "Product Name error: Must contain only letters and spaces.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate the product ingredient
            if (!ValidationUtil.validateFINGREDIENTS(Fingredient)) {
                JOptionPane.showMessageDialog(fragpnl, "Product Ingredient error: Must contain only letters and spaces.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the quantity
            if (!ValidationUtil.validateFQuantity(fragquantity)) {
                JOptionPane.showMessageDialog(fragpnl, "Product Quantity error: Only contains one digit number.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the brand
            if (!ValidationUtil.validateFBrand(Fbrand)) {
                JOptionPane.showMessageDialog(fragpnl, "Product Brand error: Must contain only letters and spaces.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the price
            if (!ValidationUtil.validateFPrice(fragprice)) {
                JOptionPane.showMessageDialog(fragpnl, "Product Price error: Should not start with 0 and conists 4 digits.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the manufactured date
            if (!ValidationUtil.validateFMGDATE(Fmfgdate)) {
                JOptionPane.showMessageDialog(fragpnl, "Product Manufactured date error: Must start with 4 digits "
                        + "and conatins any one month among 12 months.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //validate the expiry date
            if (!ValidationUtil.validateFEXPDATE(Fexpdate)) {
                JOptionPane.showMessageDialog(fragpnl, "Product Expired date error: Must start with 4 digits and conatins "
                        + "any one month among 12 months.", "Update-Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Flag to check if fragrance with the given ID exists
            boolean fragranceFound = false;

            // Searching for the fragrance in the fragranceList to update
            for (int i = 0; i < fragnanceList.size(); i++) {
                FragnanceModel fragrance = fragnanceList.get(i);

                // If the fragrance ID matches, update the fragrance details
                if (fragrance.getFid() == fragid) {
                    fragrance.setFname(Fname);
                    fragrance.setFingredient(Fingredient);
                    fragrance.setFquantity(fragquantity);
                    fragrance.setFbrand(Fbrand);
                    fragrance.setFprice(fragprice);
                    fragrance.setFmfgdate(Fmfgdate);
                    fragrance.setFexpdate(Fexpdate);

                    // Update the table (if needed)
                    DefaultTableModel model = (DefaultTableModel) fragnancetbl.getModel();
                    model.setValueAt(Fname, i, 1); // Update name
                    model.setValueAt(Fingredient, i, 2); // Update ingredient
                    model.setValueAt(fragquantity, i, 3); // Update quantity
                    model.setValueAt(Fbrand, i, 4); // Update brand
                    model.setValueAt(fragprice, i, 5); // Update price
                    model.setValueAt(Fmfgdate, i, 6); // Update manufacture date
                    model.setValueAt(Fexpdate, i, 7); // Update expiration date

                    fragranceFound = true;
                    JOptionPane.showMessageDialog(fragpnl, "Fragrance details updated successfully!", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            }

            // If no matching fragrance is found, show an error
            if (!fragranceFound) {
                JOptionPane.showMessageDialog(fragpnl, "No fragrance found with the given ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Clear text fields after updating
            clearFieldsF();
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(fragpnl, "Invalid input. Please enter valid numbers for ID, quantity, and price.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(fragpnl, "An error occurred while updating the fragrance details.", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }                                          

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        // Prompt the user for the product code to delete
        String deleteID = JOptionPane.showInputDialog(pnlMain, "Enter product Code:");
        if (deleteID == null || deleteID.isEmpty()) {
            JOptionPane.showMessageDialog(pnlMain, "Empty box. Please enter a value.", "Alert", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                int d_id = Integer.parseInt(deleteID);
                boolean found = false; // Flag to check if product exists

                // Using iterator to safely remove from the list
                for (Iterator<MakeupModel> iterator = makeupList.iterator(); iterator.hasNext();) {
                    MakeupModel id = iterator.next();
                    if (id.getMid() == d_id) {
                        iterator.remove(); // Remove the product safely
                        JOptionPane.showMessageDialog(pnlMain, "Successfully removed product!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        found = true; // Mark as found
                        break; // Exit loop after removal
                    }
                }

                if (!found) {
                    JOptionPane.showMessageDialog(pnlMain, "Product not found!", "Alert", JOptionPane.ERROR_MESSAGE);
                } else {
                    //Update the table model after deletion
                    refreshtable();
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(pnlMain, "Product code should be a number!", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }                                         

    private void add1btnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:

        String Fid = fragidtxt.getText();
        String Fname = fragnametxt.getText();
        String Fingredient = fragingritxt.getText();
        String Fquantity = fragquantityxt.getText();
        String Fbrand = fragbrandtxt.getText();
        String Fprice = fragpricetxt.getText();
        String Fmfgdate = fragmfgtxt.getText();
        String Fexpdate = fragexptxt.getText();

        if (Fid.isEmpty() || Fname.isEmpty() || Fingredient.isEmpty() || Fquantity.isEmpty() || Fbrand.isEmpty() 
                || Fprice.isEmpty() || Fmfgdate.isEmpty() || Fexpdate.isEmpty()) {
            JOptionPane.showMessageDialog(fragpnl, "Please enter all details of fragnance.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {

                int fragid = Integer.parseInt(Fid);
                int fragquantity = Integer.parseInt(Fquantity);
                int fragprice = Integer.parseInt(Fprice);

                // Validate the product id
                if (!ValidationUtil.validateFId(fragid)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product ID error: Must start with 1 and consists 3 more digits.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Validate the product name
                if (!ValidationUtil.validateFName(Fname)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product Name error: Must contain only letters and spaces.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Validate the product ingridient
                if (!ValidationUtil.validateFINGREDIENTS(Fingredient)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product Ingredient error: Must contain only letters and spaces.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the quantity
                if (!ValidationUtil.validateFQuantity(fragquantity)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product Quantity error: Only contains one digit number.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the brand
                if (!ValidationUtil.validateFBrand(Fbrand)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product Brand error: Must contain only letters and spaces.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the price
                if (!ValidationUtil.validateFPrice(fragprice)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product Price error: Should not start with 0 and conists 4 digits.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //validate the manufactured date
                if (!ValidationUtil.validateFMGDATE(Fmfgdate)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product Manufactured date error: Must start with 2 and contains"
                            + " 3 other digits and conatins any one month among 12 months.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                //validate the expiry date
                if (!ValidationUtil.validateFEXPDATE(Fexpdate)) {
                    JOptionPane.showMessageDialog(fragpnl, "Product Expired date error: Must start with 2 and contains 3 other "
                            + "digits and conatins any one month among 12 months.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                boolean fragnanceExists = false;
                for (FragnanceModel fragnance : fragnanceList) {
                    if (fragnance.getFid() == fragid) {
                        fragnanceExists = true;
                        break;
                    }

                }

                if (fragnanceExists) {
                    JOptionPane.showMessageDialog(fragpnl, "The product already exists.", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    FragnanceModel fragnance = new FragnanceModel(fragid, Fname, Fingredient, fragquantity, Fbrand, fragprice, Fmfgdate, Fexpdate);
                    registerFragnance(fragnance);
                    JOptionPane.showMessageDialog(fragpnl, "Product successfully added.", "Success", JOptionPane.INFORMATION_MESSAGE);

                }

            } catch (NumberFormatException n) {
                JOptionPane.showMessageDialog(fragpnl, "Invalid input. Please enter valid numbers.", "Information", JOptionPane.INFORMATION_MESSAGE);

            }

        }

    }                                       

    private void delete1btnActionPerformed(java.awt.event.ActionEvent evt) {                                           

        String deleteID = JOptionPane.showInputDialog(pnlMain, "Enter product Code:");
        if (deleteID == null || deleteID.isEmpty()) {
            JOptionPane.showMessageDialog(pnlMain, "Empty box. Please enter a value.", "Alert", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                int d_id = Integer.parseInt(deleteID);
                boolean found = false; // Flag to check if product exists

                // Using iterator to safely remove from the list
                for (Iterator<FragnanceModel> iterator = fragnanceList.iterator(); iterator.hasNext();) {
                    FragnanceModel id = iterator.next();
                    if (id.getFid() == d_id) {
                        iterator.remove(); // Remove the product safely
                        JOptionPane.showMessageDialog(pnlMain, "Successfully removed product!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        found = true; // Mark as found
                        break; // Exit loop after removal
                    }
                }

                if (!found) {
                    JOptionPane.showMessageDialog(pnlMain, "Product not found!", "Alert", JOptionPane.ERROR_MESSAGE);
                } else {
                    //Update the table model after deletion

                    refreshtable();
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(pnlMain, "Product code should be a number!", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }                                          

    private void fragnancecomboxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        String selectedOrder1 = (String) fragnancecombox.getSelectedItem();
        ArrayList<FragnanceModel> fragnanceListSort = new ArrayList();
        fragnanceListSort.addAll(fragnanceList);
        SelectionSort selectionSort = new SelectionSort();
        InsertionSort insertionSort = new InsertionSort();
        MergeSort mergeSort = new MergeSort();
        
        if ("Price Ascending(lowest-highest)".equals(selectedOrder1)) {
            selectionSort.ExecuteSelectionSortFA(fragnanceListSort);  // Sort by price Ascending order
        } else if ("Price Descending(highest-lowest)".equals(selectedOrder1)) {
            selectionSort.ExecuteSelectionSortFD(fragnanceListSort);  // Sort by Descending order
        } else if ("Name Ascending(A-Z)".equals(selectedOrder1)) {
            insertionSort.ExecuteInsertionSortByNameFA(fragnanceListSort);  // Sort by name ascending
        } else if ("Name Descending(Z-A)".equals(selectedOrder1)) {
            insertionSort.ExecuteInsertionSortByNameFD(fragnanceListSort);  // Sort by name descending
        } else if ("ID Ascending".equals(selectedOrder1)) {
            mergeSort.ExecuteMergeSortFA(fragnanceListSort, 0, fragnanceListSort.size() - 1);  // Sort by id ascending
        } else if ("ID Descending".equals(selectedOrder1)) {
            mergeSort.ExecuteMergeSortFD(fragnanceListSort, 0, fragnanceListSort.size() - 1);   // Sort by id descending
        }
        DefaultTableModel FragnanceModel = (DefaultTableModel) fragnancetbl.getModel();
        FragnanceModel.setRowCount(0);

        fragnanceListSort.forEach(element -> {
            Object[] fragnanceData = {
                element.getFid(),
                element.getFname(),
                element.getFingredient(),
                element.getFquantity(),
                element.getFbrand(),
                element.getFprice(),
                element.getFmfgdate(),
                element.getFexpdate()};

            FragnanceModel.addRow(fragnanceData);
        });
    }                                               

    private void makeuppcomboboxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        String selectedOrder = (String) makeuppcombobox.getSelectedItem();
        ArrayList<MakeupModel> makeupListSort = new ArrayList();
        makeupListSort.addAll(makeupList);
        SelectionSort selectionSort = new SelectionSort();
        InsertionSort insertionSort = new InsertionSort();
        MergeSort mergeSort = new MergeSort();

        if ("Price Ascending(lowest-highest)".equals(selectedOrder)) {
            selectionSort.ExecuteSelectionSortA(makeupListSort); // Sort by price ascending
        } else if ("Price Descending(highest-lowest)".equals(selectedOrder)) {
            selectionSort.ExecuteSelectionSortD(makeupListSort);  // Sort by price descending 
        } else if ("Name Ascending(A-Z)".equals(selectedOrder)) {
            insertionSort.ExecuteInsertionSortByNameA(makeupListSort);  // Sort by name ascending
        } else if ("Name Descending(Z-A)".equals(selectedOrder)) {
            insertionSort.ExecuteInsertionSortByNameD(makeupListSort);  // Sort by name descending
        } else if ("ID Ascending".equals(selectedOrder)) {
            mergeSort.ExecuteMergeSortA(makeupListSort, 0, makeupListSort.size() - 1);  // Sort by id ascending
        } else if ("ID Descending".equals(selectedOrder)) {
            mergeSort.ExecuteMergeSortD(makeupListSort, 0, makeupListSort.size() - 1);   // Sort by id descending
        }
        DefaultTableModel MakeupModel = (DefaultTableModel) mkuptbl.getModel();
        MakeupModel.setRowCount(0);
        makeupListSort.forEach(element -> {
            Object[] makeupData = {
                element.getMid(),
                element.getMname(),
                element.getMshade(),
                element.getMquantity(),
                element.getMbrand(),
                element.getMprice(),
                element.getMingredients(),
                element.getMmfgdate(),
                element.getMexpdate()};

            MakeupModel.addRow(makeupData);
        });
    }                                               

    private void searchmkuimglblMouseClicked(java.awt.event.MouseEvent evt) {                                             
        InsertionSort sort = new InsertionSort();
        sort.ExecuteInsertionSortByNameA(makeupList);
        BinarySearch search = new BinarySearch();
        MakeupModel searchedModel = search.searchByNameProduct(searchmkutxt.getText(), makeupList, 0, makeupList.size() - 1);
        if (searchedModel != null) {
            JOptionPane.showMessageDialog(Adminctrlpnl,
                    "Product ID: " + searchedModel.getMid() + "\n"
                    + "Product Name: " + searchedModel.getMname() + "\n"
                    + "Product Shade: " + searchedModel.getMshade() + "\n"
                    + "Quantity : " + searchedModel.getMquantity() + "\n"
                    + "Brand : " + searchedModel.getMbrand() + "\n"
                    + "Price : " + searchedModel.getMprice() + "\n"
                    + "Ingredients  " + searchedModel.getMingredients() + "\n"
                    + "Manufactured date:" + searchedModel.getMmfgdate() + "\n"
                    + "Expiry date:" + searchedModel.getMexpdate());
        } else {
            JOptionPane.showMessageDialog(Adminctrlpnl, "Please enter valid product name.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                            

    private void searchimgfrglblMouseClicked(java.awt.event.MouseEvent evt) {                                             
        InsertionSort sort = new InsertionSort();
        sort.ExecuteInsertionSortByNameFA(fragnanceList);
        BinarySearch search = new BinarySearch();
        FragnanceModel searchedModel = search.searchByNameProductF(searchfragtxt.getText(), fragnanceList, 0, fragnanceList.size() - 1);
        if (searchedModel != null) {
            JOptionPane.showMessageDialog(Adminctrlpnl,
                    "Product ID: " + searchedModel.getFid() + "\n"
                    + "Product Name: " + searchedModel.getFname() + "\n"
                    + "Ingredients  " + searchedModel.getFingredient() + "\n"
                    + "Quantity : " + searchedModel.getFquantity() + "\n"
                    + "Brand : " + searchedModel.getFbrand() + "\n"
                    + "Price : " + searchedModel.getFprice() + "\n"
                    + "Manufactured date:" + searchedModel.getFmfgdate() + "\n"
                    + "Expiry date:" + searchedModel.getFexpdate());
        } else {
            JOptionPane.showMessageDialog(Adminctrlpnl, "Please enter valid product name.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GlamUpwithAaditi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GlamUpwithAaditi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GlamUpwithAaditi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GlamUpwithAaditi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GlamUpwithAaditi().setVisible(true);
        });

    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel Adminctrlpnl;
    private javax.swing.JPanel Loginpnl;
    private javax.swing.JPanel Muppnl;
    private javax.swing.JLabel abtusheadlbl;
    private javax.swing.JPanel abtuspnl;
    private javax.swing.JButton add1btn;
    private javax.swing.JButton addbtn;
    private javax.swing.JLabel addresslbl;
    private javax.swing.JLabel brushlbl;
    private javax.swing.JButton btnlogout;
    private javax.swing.JLabel calllbl;
    private javax.swing.JLabel connectlbl;
    private javax.swing.JLabel copyrightlbl;
    private javax.swing.JButton delete1btn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel emaillbl;
    private javax.swing.JTextField emailtxt;
    private javax.swing.JButton enterbtn;
    private javax.swing.JLabel fbimglbl;
    private javax.swing.JTextField feedbacktxt;
    private javax.swing.JTextField fragbrandtxt;
    private javax.swing.JTextField fragexptxt;
    private javax.swing.JTextField fragidtxt;
    private javax.swing.JTextField fragingritxt;
    private javax.swing.JTextField fragmfgtxt;
    private javax.swing.JTextField fragnametxt;
    private javax.swing.JComboBox<String> fragnancecombox;
    private javax.swing.JPanel fragnancepnl;
    private javax.swing.JTable fragnancetbl;
    private javax.swing.JPanel fragpnl;
    private javax.swing.JTextField fragpricetxt;
    private javax.swing.JTextField fragquantityxt;
    private javax.swing.JLabel fragtitlelbl;
    private javax.swing.JLabel girlimglbl;
    private javax.swing.JLabel guwalbl;
    private javax.swing.JPanel homepnl2;
    private javax.swing.JLabel instaimglbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblloginerror;
    private javax.swing.JLabel line1lbl;
    private javax.swing.JLabel line2lbl;
    private javax.swing.JLabel line3lbl;
    private javax.swing.JLabel line4lbl;
    private javax.swing.JLabel line5lbl;
    private javax.swing.JLabel line6lbl;
    private javax.swing.JLabel line7lbl;
    private javax.swing.JLabel line8lbl;
    private javax.swing.JLabel line9lbl;
    private javax.swing.JLabel locationlbl;
    private javax.swing.JLabel loginlbl;
    private javax.swing.JLabel mailimglbl;
    private javax.swing.JComboBox<String> makeuppcombobox;
    private javax.swing.JPanel makeuppnl;
    private javax.swing.JLabel messagelbl;
    private javax.swing.JTextField mkubrandtxt;
    private javax.swing.JTextField mkuexptxt;
    private javax.swing.JTextField mkuidtxt;
    private javax.swing.JTextField mkuingrtxt;
    private javax.swing.JTextField mkumfgtxt;
    private javax.swing.JTextField mkunametxt;
    private javax.swing.JTextField mkupricetxt;
    private javax.swing.JTable mkuptbl;
    private javax.swing.JTextField mkuquantitytxt;
    private javax.swing.JTextField mkushadetxt;
    private javax.swing.JLabel muptitlelbl;
    private javax.swing.JLabel newlbl;
    private javax.swing.JLabel num1lbl;
    private javax.swing.JLabel numlbl;
    private javax.swing.JLabel offlbl;
    private javax.swing.JLabel openlbl;
    private javax.swing.JPasswordField passwordfld;
    private javax.swing.JLabel perfimglbl;
    private javax.swing.JLabel perfumelbl;
    private javax.swing.JLabel phonelbl;
    private javax.swing.JLabel placelbl;
    private javax.swing.JPanel pnlCategory;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlaboutus;
    private javax.swing.JPanel pnlcontact;
    private javax.swing.JLabel pouchlbl;
    private javax.swing.JLabel salelbl;
    private javax.swing.JTextField searchfragtxt;
    private javax.swing.JLabel searchimgfrglbl;
    private javax.swing.JLabel searchmkuimglbl;
    private javax.swing.JTextField searchmkutxt;
    private javax.swing.JButton update1btn;
    private javax.swing.JButton updatebtn;
    private javax.swing.JPanel welcomepnl;
    private javax.swing.JLabel welcometbl;
    private javax.swing.JLabel whatsappimglbl;
    // End of variables declaration                   

    private void refreshtable() {
        DefaultTableModel model = (DefaultTableModel) mkuptbl.getModel();
        model.setRowCount(0); // Clear existing rows

        for (MakeupModel makeup : makeupList) {
            model.addRow(new Object[]{
                makeup.getMid(),
                makeup.getMname(),
                makeup.getMshade(),
                makeup.getMquantity(),
                makeup.getMbrand(),
                makeup.getMprice(),
                makeup.getMingredients(),
                makeup.getMmfgdate(),
                makeup.getMexpdate()
            });

            DefaultTableModel model2 = (DefaultTableModel) fragnancetbl.getModel();
            model2.setRowCount(0); // Clear existing rows

            for (FragnanceModel fragnance : fragnanceList) {
                model2.addRow(new Object[]{
                    fragnance.getFid(),
                    fragnance.getFname(),
                    fragnance.getFingredient(),
                    fragnance.getFquantity(),
                    fragnance.getFbrand(),
                    fragnance.getFprice(),
                    fragnance.getFmfgdate(),
                    fragnance.getFexpdate()
                });
            }
        }
    }
}
